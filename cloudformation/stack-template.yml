AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: Chow Down Stack
Parameters:
  Env:
    Type: String
  PublicURL:
    Type: String
  HostedZoneId:
    Type: String
  AcmCertificateArn:
    Type: String
  S3OriginAccessIdentity:
    Type: String
Conditions:
  CreateProdResources: !Equals [ !Ref Env, 'prod' ]
Resources:
  #S3 Buckets
  ChowDownFrontEndBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketName:
        Fn::Join: [ '-', [ 'chow-down-front-end', !Ref Env ] ]
      VersioningConfiguration:
        Status: Enabled
  ChowDownFrontEndBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ChowDownFrontEndBucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              AWS:
                - Fn::Join: [ ' ', [ 'arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity', !Ref S3OriginAccessIdentity ] ]
            Action:
              - 's3:GetObject'
            Resource:
              Fn::Join: [ '', [ !GetAtt ChowDownFrontEndBucket.Arn, '/*' ] ]
          - Effect: Allow
            Principal:
              AWS:
                - Fn::Join: [ ' ', [ 'arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity', !Ref S3OriginAccessIdentity ] ]
            Action:
              - 's3:ListBucket'
            Resource: !GetAtt ChowDownFrontEndBucket.Arn
  ChowDownApiSourceCodeBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketName:
        Fn::Join: [ '-', [ 'chow-down-api-source-code-bucket', !Ref Env ] ]
      VersioningConfiguration:
        Status: Enabled
  #IAM roles
  GetRecipesFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Join: [ '-', [ 'chow-down-get-recipes-role', !Ref Env ] ]
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - 'lambda.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
  #Lambda Function Definitions
  GetRecipesFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Join: [ '-', [ 'GetRecipesFunction', !Ref Env ] ]
      Handler: api/fake-recipes.handler
      Runtime: nodejs10.x
      CodeUri:
        Bucket: !Ref ChowDownApiSourceCodeBucket
        Key: %{ChowDownApiSourceKey}
      Role:
        Fn::GetAtt:
          - GetRecipesFunctionRole
          - Arn
      Timeout: 30
      Events:
        BasicGet:
          Type: Api
          Properties:
            Path: /api/recipes
            Method: get
            RestApiId: !Ref ChowDownApi
  ChowDownApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Env
  #CloudFront distro to sit in front of bucket and reduce outbound cost
  ChowDownDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        Comment:
          Fn::Join: [ '', [ 'ChowDown Distro [', !Ref Env, ']' ] ]
        Aliases:
        - !Ref PublicURL
        - !If [ CreateProdResources, !Join [ '.', [ 'www', !Ref PublicURL ] ], !Ref PublicURL ]
        DefaultRootObject: index.html
        HttpVersion: http2
        ViewerCertificate:
          AcmCertificateArn: !Ref AcmCertificateArn
          SslSupportMethod: sni-only
        Origins:
        - DomainName: !GetAtt ChowDownFrontEndBucket.DomainName
          Id:
            Fn::Join: [ '-', [ 'origin', !GetAtt ChowDownFrontEndBucket.DomainName ] ]
          S3OriginConfig:
            OriginAccessIdentity:
              Fn::Join: [ '', [ 'origin-access-identity/cloudfront/', !Ref S3OriginAccessIdentity ] ]
        - DomainName:
            Fn::Join: [ '', [ !Ref Api, '.execute-api.', !Ref 'AWS::Region', '.amazonaws.com' ] ]
          Id:
            Fn::Join: [ '', [ 'origin-', !Ref ChowDownApi, '.execute-api.', !Ref 'AWS::Region', '.amazonaws.com' ] ]
          OriginPath:
            Fn::Join: [ '', [ '/', !Ref Env ] ]
          CustomOriginConfig:
            HTTPSPort: '443'
            OriginProtocolPolicy: https-only
            OriginSSLProtocols:
            - 'TLSv1'
            - 'TLSv1.1'
            - 'TLSv1.2'
        CustomErrorResponses:
        - ErrorCode: 404
          ResponseCode: 200
          ResponsePagePath: /index.html
        DefaultCacheBehavior:
          AllowedMethods:
          - GET
          - HEAD
          - OPTIONS
          TargetOriginId:
            Fn::Join: [ '-', [ 'origin', !GetAtt ChowDownFrontEndBucket.DomainName ] ]
          ForwardedValues:
            QueryString: true
            Cookies:
              Forward: all
          ViewerProtocolPolicy: redirect-to-https
          Compress: true
        CacheBehaviors:
        - AllowedMethods:
          - GET
          - HEAD
          - OPTIONS
          - PUT
          - PATCH
          - POST
          - DELETE
          TargetOriginId:
            Fn::Join: [ '', [ 'origin-', !Ref ChowDownApi, '.execute-api.', !Ref 'AWS::Region', '.amazonaws.com' ] ]
          PathPattern: '/api/*'
          DefaultTTL: 60
          MaxTTL: 3600
          MinTTL: 60
          ForwardedValues:
            QueryString: true
            Cookies:
              Forward: none
          ViewerProtocolPolicy: redirect-to-https
  ChowDownDistributionDNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Ref PublicURL
      Type: A
      AliasTarget:
        DNSName: !GetAtt ChowDownDistribution.DomainName
        EvaluateTargetHealth: false
        HostedZoneId: Z2FDTNDATAQYW2
  ChowDownDistributionWWWDNSRecord:
    Type: AWS::Route53::RecordSet
    Condition: CreateProdResources
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name:
        Fn::Join: [ '.', [ 'www', !Ref PublicURL ] ]
      Type: A
      AliasTarget:
        DNSName: !GetAtt ChowDownDistribution.DomainName
        EvaluateTargetHealth: false
        HostedZoneId: Z2FDTNDATAQYW2