AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: Chow Down Stack
Parameters:
  Env:
    Type: String
  ApiSourceCodeBucket:
    Type: String
  PublicURL:
    Type: String
  HostedZoneId:
    Type: String
  AcmCertificateArn:
    Type: String
  S3OriginAccessIdentity:
    Type: String
Conditions:
  CreateProdResources: !Equals [ !Ref Env, 'prod' ]
Resources:
  # S3 Buckets
  ChowDownFrontEndBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketName:
        Fn::Join: [ '-', [ 'chow-down-front-end', !Ref Env ] ]
      VersioningConfiguration:
        Status: Enabled
  ChowDownFrontEndBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ChowDownFrontEndBucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              AWS:
                - Fn::Join: [ ' ', [ 'arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity', !Ref S3OriginAccessIdentity ] ]
            Action:
              - 's3:GetObject'
            Resource:
              Fn::Join: [ '', [ !GetAtt ChowDownFrontEndBucket.Arn, '/*' ] ]
          - Effect: Allow
            Principal:
              AWS:
                - Fn::Join: [ ' ', [ 'arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity', !Ref S3OriginAccessIdentity ] ]
            Action:
              - 's3:ListBucket'
            Resource: !GetAtt ChowDownFrontEndBucket.Arn
  ChowDownImagesBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketName:
        Fn::Join: [ '-', [ 'chow-down-images', !Ref Env ] ]
  ChowDownImagesBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ChowDownImagesBucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              AWS:
                - Fn::Join: [ ' ', [ 'arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity', !Ref S3OriginAccessIdentity ] ]
            Action:
              - 's3:GetObject'
            Resource:
              Fn::Join: [ '', [ !GetAtt ChowDownImagesBucket.Arn, '/*' ] ]
          - Effect: Allow
            Principal:
              AWS:
                - Fn::Join: [ ' ', [ 'arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity', !Ref S3OriginAccessIdentity ] ]
            Action:
              - 's3:ListBucket'
            Resource: !GetAtt ChowDownImagesBucket.Arn
  # Database
  ChowDownDatabase:
    Type: AWS::RDS::DBCluster
    Properties:
      DatabaseName: chowdown
      DBClusterIdentifier:
        Fn::Join: [ '-', [ 'chowdown', 'cluster', !Ref Env ] ]
      DeletionProtection: true
      Engine: aurora-postgresql
      EngineMode: serverless
      EngineVersion: 10.7
      MasterUsername:
        Fn::Join: [ '', [ '{{resolve:secretsmanager:', !Ref ChowDownDatabaseMasterCreds, ':SecretString:username}}' ] ]
      MasterUserPassword:
        Fn::Join: [ '', [ '{{resolve:secretsmanager:', !Ref ChowDownDatabaseMasterCreds, ':SecretString:password}}' ] ]
      BackupRetentionPeriod: 7
      PreferredBackupWindow: 03:00-03:30
      PreferredMaintenanceWindow: mon:03:30-mon:04:00
      ScalingConfiguration:
        AutoPause: true
        MaxCapacity: 2
        MinCapacity: 2
        SecondsUntilAutoPause: 900
  ChowDownDatabaseMasterCreds:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name:
        Fn::Join: [ '/', [ 'rds-db-credentials', 'chowdown', 'databases', 'admin', !Ref Env ] ]
      GenerateSecretString:
        SecretStringTemplate:
          Fn::Join: [ '', [ '{"username": "chow_admin"}' ] ]
        GenerateStringKey: 'password'
        PasswordLength: 32
        ExcludeCharacters: '"@/\;'
  ChowDownDatabaseMasterCredsAttachment:
    Type: AWS::SecretsManager::SecretTargetAttachment
    Properties:
      SecretId: !Ref ChowDownDatabaseMasterCreds
      TargetId: !Ref ChowDownDatabase
      TargetType: AWS::RDS::DBCluster
  ChowDownDatabaseReadOnlyCreds:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name:
        Fn::Join: [ '/', [ 'rds-db-credentials', 'chowdown', 'databases', 'read_only', !Ref Env ] ]
      GenerateSecretString:
        SecretStringTemplate:
          Fn::Join: [ '', [ '{"username": "chow_read_only"}' ] ]
        GenerateStringKey: 'password'
        PasswordLength: 32
        ExcludeCharacters: "';"
  ChowDownDatabaseReadOnlyCredsAttachment:
    Type: AWS::SecretsManager::SecretTargetAttachment
    Properties:
      SecretId: !Ref ChowDownDatabaseReadOnlyCreds
      TargetId: !Ref ChowDownDatabase
      TargetType: AWS::RDS::DBCluster
  ChowDownDatabaseWriteUpdateOnlyCreds:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name:
        Fn::Join: [ '/', [ 'rds-db-credentials', 'chowdown', 'databases', 'write_update_only', !Ref Env ] ]
      GenerateSecretString:
        SecretStringTemplate:
          Fn::Join: [ '', [ '{"username": "chow_write_update_only"}' ] ]
        GenerateStringKey: 'password'
        PasswordLength: 32
        ExcludeCharacters: "';"
  ChowDownDatabaseWriteUpdateOnlyCredsAttachment:
    Type: AWS::SecretsManager::SecretTargetAttachment
    Properties:
      SecretId: !Ref ChowDownDatabaseWriteUpdateOnlyCreds
      TargetId: !Ref ChowDownDatabase
      TargetType: AWS::RDS::DBCluster
  ChowDownDatabaseDeleteOnlyCreds:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name:
        Fn::Join: [ '/', [ 'rds-db-credentials', 'chowdown', 'databases', 'delete_only', !Ref Env ] ]
      GenerateSecretString:
        SecretStringTemplate:
          Fn::Join: [ '', [ '{"username": "chow_delete_only"}' ] ]
        GenerateStringKey: 'password'
        PasswordLength: 32
        ExcludeCharacters: "';"
  ChowDownDatabaseDeleteOnlyCredsAttachment:
    Type: AWS::SecretsManager::SecretTargetAttachment
    Properties:
      SecretId: !Ref ChowDownDatabaseDeleteOnlyCreds
      TargetId: !Ref ChowDownDatabase
      TargetType: AWS::RDS::DBCluster
  # IAM roles
  LambdaFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Join: [ '-', [ 'chow-down-lambda-role', !Ref Env ] ]
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - 'lambda.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        - 'arn:aws:iam::aws:policy/AmazonRDSDataFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
        - 'arn:aws:iam::aws:policy/CloudFrontFullAccess'
  # Lambda Function Definitions
  ## Units
  GetUnitsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Join: [ '-', [ 'GetUnitsFunction', !Ref Env ] ]
      Handler: recipes.chowdown.service.units.GetUnitsService::handleRequest
      Runtime: java8
      CodeUri:
        Bucket: !Ref ApiSourceCodeBucket
        Key: %{ChowDownApiSourceKey}
      Role:
        Fn::GetAtt:
          - LambdaFunctionRole
          - Arn
      MemorySize: 1024
      Timeout: 60
      Environment:
        Variables:
          RESOURCE_ARN:
            Fn::Join: [ ':', [ 'arn:aws:rds', !Ref 'AWS::Region', !Ref 'AWS::AccountId', 'cluster', !Ref ChowDownDatabase ] ]
          SECRET_ARN: !Ref ChowDownDatabaseReadOnlyCreds
          DATABASE_NAME: !Ref ChowDownDatabase
  GetUnitsLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      FunctionName:
        Fn::GetAtt:
          - GetUnitsFunction
          - Arn
      SourceArn:
        Fn::Join: [ ':', [ 'arn:aws:execute-api', !Ref 'AWS::Region', !Ref 'AWS::AccountId', '*' ] ]
  PutUnitFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Join: [ '-', [ 'PutUnitFunction', !Ref Env ] ]
      Handler: recipes.chowdown.service.units.PutUnitService::handleRequest
      Runtime: java8
      CodeUri:
        Bucket: !Ref ApiSourceCodeBucket
        Key: %{ChowDownApiSourceKey}
      Role:
        Fn::GetAtt:
          - LambdaFunctionRole
          - Arn
      MemorySize: 1024
      Timeout: 60
      Environment:
        Variables:
          RESOURCE_ARN:
            Fn::Join: [ ':', [ 'arn:aws:rds', !Ref 'AWS::Region', !Ref 'AWS::AccountId', 'cluster', !Ref ChowDownDatabase ] ]
          SECRET_ARN: !Ref ChowDownDatabaseWriteUpdateOnlyCreds
          DATABASE_NAME: !Ref ChowDownDatabase
  PutUnitLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      FunctionName:
        Fn::GetAtt:
          - PutUnitFunction
          - Arn
      SourceArn:
        Fn::Join: [ ':', [ 'arn:aws:execute-api', !Ref 'AWS::Region', !Ref 'AWS::AccountId', '*' ] ]
  ## Ingredients
  GetIngredientsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Join: [ '-', [ 'GetIngredientsFunction', !Ref Env ] ]
      Handler: recipes.chowdown.service.ingredients.GetIngredientsService::handleRequest
      Runtime: java8
      CodeUri:
        Bucket: !Ref ApiSourceCodeBucket
        Key: %{ChowDownApiSourceKey}
      Role:
        Fn::GetAtt:
          - LambdaFunctionRole
          - Arn
      MemorySize: 1024
      Timeout: 60
      Environment:
        Variables:
          RESOURCE_ARN:
            Fn::Join: [ ':', [ 'arn:aws:rds', !Ref 'AWS::Region', !Ref 'AWS::AccountId', 'cluster', !Ref ChowDownDatabase ] ]
          SECRET_ARN: !Ref ChowDownDatabaseReadOnlyCreds
          DATABASE_NAME: !Ref ChowDownDatabase
  GetIngredientsLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      FunctionName:
        Fn::GetAtt:
          - GetIngredientsFunction
          - Arn
      SourceArn:
        Fn::Join: [ ':', [ 'arn:aws:execute-api', !Ref 'AWS::Region', !Ref 'AWS::AccountId', '*' ] ]
  PutIngredientFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Join: [ '-', [ 'PutIngredientFunction', !Ref Env ] ]
      Handler: recipes.chowdown.service.ingredients.PutIngredientService::handleRequest
      Runtime: java8
      CodeUri:
        Bucket: !Ref ApiSourceCodeBucket
        Key: %{ChowDownApiSourceKey}
      Role:
        Fn::GetAtt:
          - LambdaFunctionRole
          - Arn
      MemorySize: 1024
      Timeout: 60
      Environment:
        Variables:
          RESOURCE_ARN:
            Fn::Join: [ ':', [ 'arn:aws:rds', !Ref 'AWS::Region', !Ref 'AWS::AccountId', 'cluster', !Ref ChowDownDatabase ] ]
          SECRET_ARN: !Ref ChowDownDatabaseWriteUpdateOnlyCreds
          DATABASE_NAME: !Ref ChowDownDatabase
  PutIngredientLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      FunctionName:
        Fn::GetAtt:
          - PutIngredientFunction
          - Arn
      SourceArn:
        Fn::Join: [ ':', [ 'arn:aws:execute-api', !Ref 'AWS::Region', !Ref 'AWS::AccountId', '*' ] ]
  ## Recipes
  GetRecipesFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Join: [ '-', [ 'GetRecipesFunction', !Ref Env ] ]
      Handler: recipes.chowdown.service.recipes.GetRecipesService::handleRequest
      Runtime: java8
      CodeUri:
        Bucket: !Ref ApiSourceCodeBucket
        Key: %{ChowDownApiSourceKey}
      Role:
        Fn::GetAtt:
          - LambdaFunctionRole
          - Arn
      MemorySize: 1024
      Timeout: 60
      Environment:
        Variables:
          RESOURCE_ARN:
            Fn::Join: [ ':', [ 'arn:aws:rds', !Ref 'AWS::Region', !Ref 'AWS::AccountId', 'cluster', !Ref ChowDownDatabase ] ]
          SECRET_ARN: !Ref ChowDownDatabaseReadOnlyCreds
          DATABASE_NAME: !Ref ChowDownDatabase
  GetRecipesLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      FunctionName:
        Fn::GetAtt:
          - GetRecipesFunction
          - Arn
      SourceArn:
        Fn::Join: [ ':', [ 'arn:aws:execute-api', !Ref 'AWS::Region', !Ref 'AWS::AccountId', '*' ] ]
  PutRecipeFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Join: [ '-', [ 'PutRecipeFunction', !Ref Env ] ]
      Handler: recipes.chowdown.service.recipes.PutRecipeService::handleRequest
      Runtime: java8
      CodeUri:
        Bucket: !Ref ApiSourceCodeBucket
        Key: %{ChowDownApiSourceKey}
      Role:
        Fn::GetAtt:
          - LambdaFunctionRole
          - Arn
      MemorySize: 1024
      Timeout: 60
      Environment:
        Variables:
          RESOURCE_ARN:
            Fn::Join: [ ':', [ 'arn:aws:rds', !Ref 'AWS::Region', !Ref 'AWS::AccountId', 'cluster', !Ref ChowDownDatabase ] ]
          SECRET_ARN: !Ref ChowDownDatabaseWriteUpdateOnlyCreds
          DATABASE_NAME: !Ref ChowDownDatabase
          IMAGES_BUCKET: !Ref ChowDownImagesBucket
  PutRecipeLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      FunctionName:
        Fn::GetAtt:
          - PutRecipeFunction
          - Arn
      SourceArn:
        Fn::Join: [ ':', [ 'arn:aws:execute-api', !Ref 'AWS::Region', !Ref 'AWS::AccountId', '*' ] ]
  # Api
  ChowDownApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Env
      DefinitionBody:
        Fn::Transform:
          Name: 'AWS::Include'
          Parameters:
            Location:
              Fn::Join: [ '', [ 's3://', !Ref ApiSourceCodeBucket, '/', '%{ChowDownApiSwaggerKey}' ] ]
  # CloudFront distro to sit in front of bucket and reduce outbound cost
  ChowDownDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        Comment:
          Fn::Join: [ '', [ 'ChowDown Distro [', !Ref Env, ']' ] ]
        Aliases:
        - !Ref PublicURL
        - !If [ CreateProdResources, !Join [ '.', [ 'www', !Ref PublicURL ] ], !Ref PublicURL ]
        DefaultRootObject: index.html
        HttpVersion: http2
        ViewerCertificate:
          AcmCertificateArn: !Ref AcmCertificateArn
          SslSupportMethod: sni-only
        Origins:
        - DomainName: !GetAtt ChowDownFrontEndBucket.DomainName
          Id:
            Fn::Join: [ '-', [ 'origin', !GetAtt ChowDownFrontEndBucket.DomainName ] ]
          S3OriginConfig:
            OriginAccessIdentity:
              Fn::Join: [ '', [ 'origin-access-identity/cloudfront/', !Ref S3OriginAccessIdentity ] ]
        - DomainName: !GetAtt ChowDownImagesBucket.DomainName
          Id:
            Fn::Join: [ '-', [ 'origin', !GetAtt ChowDownImagesBucket.DomainName ] ]
          S3OriginConfig:
            OriginAccessIdentity:
              Fn::Join: [ '', [ 'origin-access-identity/cloudfront/', !Ref S3OriginAccessIdentity ] ]
        - DomainName:
            Fn::Join: [ '', [ !Ref ChowDownApi, '.execute-api.', !Ref 'AWS::Region', '.amazonaws.com' ] ]
          Id:
            Fn::Join: [ '', [ 'origin-', !Ref ChowDownApi, '.execute-api.', !Ref 'AWS::Region', '.amazonaws.com' ] ]
          OriginPath:
            Fn::Join: [ '', [ '/', !Ref Env ] ]
          CustomOriginConfig:
            HTTPSPort: '443'
            OriginProtocolPolicy: https-only
            OriginReadTimeout: 60
            OriginSSLProtocols:
            - 'TLSv1'
            - 'TLSv1.1'
            - 'TLSv1.2'
        CustomErrorResponses:
        - ErrorCode: 404
          ResponseCode: 200
          ResponsePagePath: /index.html
        DefaultCacheBehavior:
          AllowedMethods:
          - GET
          - HEAD
          - OPTIONS
          TargetOriginId:
            Fn::Join: [ '-', [ 'origin', !GetAtt ChowDownFrontEndBucket.DomainName ] ]
          ForwardedValues:
            QueryString: true
            Cookies:
              Forward: all
          ViewerProtocolPolicy: redirect-to-https
          Compress: true
        CacheBehaviors:
        - AllowedMethods:
          - GET
          - HEAD
          - OPTIONS
          - PUT
          - PATCH
          - POST
          - DELETE
          TargetOriginId:
            Fn::Join: [ '', [ 'origin-', !Ref ChowDownApi, '.execute-api.', !Ref 'AWS::Region', '.amazonaws.com' ] ]
          PathPattern: '/api/*'
          DefaultTTL: 604800
          MinTTL: 604800
          ForwardedValues:
            QueryString: true
            Cookies:
              Forward: none
          ViewerProtocolPolicy: redirect-to-https
          Compress: true
        - AllowedMethods:
          - GET
          - HEAD
          - OPTIONS
          TargetOriginId:
            Fn::Join: [ '-', [ 'origin', !GetAtt ChowDownImagesBucket.DomainName ] ]
          PathPattern: '/images/*'
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          ViewerProtocolPolicy: redirect-to-https
          Compress: true
  ChowDownDistributionDNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Ref PublicURL
      Type: A
      AliasTarget:
        DNSName: !GetAtt ChowDownDistribution.DomainName
        EvaluateTargetHealth: false
        HostedZoneId: Z2FDTNDATAQYW2
  ChowDownDistributionWWWDNSRecord:
    Type: AWS::Route53::RecordSet
    Condition: CreateProdResources
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name:
        Fn::Join: [ '.', [ 'www', !Ref PublicURL ] ]
      Type: A
      AliasTarget:
        DNSName: !GetAtt ChowDownDistribution.DomainName
        EvaluateTargetHealth: false
        HostedZoneId: Z2FDTNDATAQYW2