openapi: "3.0.1"
info:
  title:
    Fn::Sub: 'ChowDown-${Env}'
  version: "1.0"
paths:
  # Units
  /api/units:
    get:
      responses:
        200:
          description: "200 response"
          headers:
            Content-Type:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Unit"
        500:
          description: "500 response"
          content: {}
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetUnitsFunction.Arn}/invocations"
        responses:
          .*ServerException.*:
            statusCode: "500"
            responseTemplates:
              application/json: "#set ($errorMessageObj = $util.parseJson($input.json('$')))\n\
                {\n  \"message\" : \"$errorMessageObj.errorMessage\"\n}"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
        httpMethod: "POST"
        passthroughBehavior: "when_no_match"
        type: "aws"
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Unit"
        required: true
      responses:
        201:
          description: "201 response"
          headers:
            Content-Type:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unit"
        500:
          description: "500 response"
          content: {}
      x-amazon-apigateway-request-validator: "Validate body"
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PutUnitFunction.Arn}/invocations"
        responses:
          .*ServerException.*:
            statusCode: "500"
            responseTemplates:
              application/json: "#set ($errorMessageObj = $util.parseJson($input.json('$')))\n\
                {\n  \"message\" : \"$errorMessageObj.errorMessage\"\n}"
          default:
            statusCode: "201"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
        httpMethod: "POST"
        passthroughBehavior: "never"
        requestTemplates:
          application/json: "$input.body"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
  # Ingredients
  /api/ingredients:
    get:
      responses:
        200:
          description: "200 response"
          headers:
            Content-Type:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Ingredient"
        500:
          description: "500 response"
          content: {}
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetIngredientsFunction.Arn}/invocations"
        responses:
          .*ServerException.*:
            statusCode: "500"
            responseTemplates:
              application/json: "#set ($errorMessageObj = $util.parseJson($input.json('$')))\n\
                {\n  \"message\" : \"$errorMessageObj.errorMessage\"\n}"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
        httpMethod: "POST"
        passthroughBehavior: "when_no_match"
        type: "aws"
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Ingredient"
        required: true
      responses:
        201:
          description: "201 response"
          headers:
            Content-Type:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Ingredient"
        500:
          description: "500 response"
          content: {}
      x-amazon-apigateway-request-validator: "Validate body"
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PutIngredientFunction.Arn}/invocations"
        responses:
          .*ServerException.*:
            statusCode: "500"
            responseTemplates:
              application/json: "#set ($errorMessageObj = $util.parseJson($input.json('$')))\n\
                {\n  \"message\" : \"$errorMessageObj.errorMessage\"\n}"
          default:
            statusCode: "201"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
        httpMethod: "POST"
        passthroughBehavior: "never"
        requestTemplates:
          application/json: "$input.body"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
  # Recipes
  /api/recipes:
    get:
      responses:
        200:
          description: "200 response"
          headers:
            Content-Type:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Recipe"
        500:
          description: "500 response"
          content: {}
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetRecipesFunction.Arn}/invocations"
        responses:
          .*ServerException.*:
            statusCode: "500"
            responseTemplates:
              application/json: "#set ($errorMessageObj = $util.parseJson($input.json('$')))\n\
                {\n  \"message\" : \"$errorMessageObj.errorMessage\"\n}"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
        httpMethod: "POST"
        passthroughBehavior: "when_no_match"
        type: "aws"
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Recipe"
        required: true
      responses:
        201:
          description: "201 response"
          headers:
            Content-Type:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Recipe"
        500:
          description: "500 response"
          content: {}
      x-amazon-apigateway-request-validator: "Validate body"
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PutRecipeFunction.Arn}/invocations"
        responses:
          .*ServerException.*:
            statusCode: "500"
            responseTemplates:
              application/json: "#set ($errorMessageObj = $util.parseJson($input.json('$')))\n\
                {\n  \"message\" : \"$errorMessageObj.errorMessage\"\n}"
          default:
            statusCode: "201"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
        httpMethod: "POST"
        passthroughBehavior: "never"
        requestTemplates:
          application/json: "$input.body"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
  # Days
  /api/days:
    get:
      parameters:
      - name: "from"
        in: "query"
        required: true
        schema:
          type: "string"
      - name: "to"
        in: "query"
        required: true
        schema:
          type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Content-Type:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Day"
        500:
          description: "500 response"
          content: {}
      x-amazon-apigateway-request-validator: "Validate query string"
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetDaysFunction.Arn}/invocations"
        responses:
          .*ServerException.*:
            statusCode: "500"
            responseTemplates:
              application/json: "#set ($errorMessageObj = $util.parseJson($input.json('$')))\n\
                {\n  \"message\" : \"$errorMessageObj.errorMessage\"\n}"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
        httpMethod: "POST"
        passthroughBehavior: "never"
        requestTemplates:
          application/json: "{\n    \"from\": \"$util.escapeJavaScript($input.params().querystring.get('from'))\"\
            ,\n    \"to\": \"$util.escapeJavaScript($input.params().querystring.get('to'))\"\
            \n}"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Day"
        required: true
      responses:
        201:
          description: "201 response"
          headers:
            Content-Type:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Day"
        500:
          description: "500 response"
          content: {}
      x-amazon-apigateway-request-validator: "Validate body"
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PutDayFunction.Arn}/invocations"
        responses:
          .*ServerException.*:
            statusCode: "500"
            responseTemplates:
              application/json: "#set ($errorMessageObj = $util.parseJson($input.json('$')))\n\
                {\n  \"message\" : \"$errorMessageObj.errorMessage\"\n}"
          default:
            statusCode: "201"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
        httpMethod: "POST"
        passthroughBehavior: "never"
        requestTemplates:
          application/json: "$input.body"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
components:
  schemas:
    Unit:
      title: "Unit schema"
      type: object
      properties:
        id:
          type: string
        singular:
          type: string
        plural:
          type: string
      required:
      - singular
      - plural
    Ingredient:
      title: "Ingredient schema"
      type: object
      properties:
        id:
          type: string
        ingredient:
          type: string
      required:
      - ingredient
    RecipeIngredient:
      title: "Recipe ingredients schema"
      type: object
      properties:
        quantity:
          type: number
        unitId:
          type: string
        unitSingularName:
          type: string
        unitPluralName:
          type: string
        ingredientId:
          type: string
        ingredientName:
          type: string
      required:
      - quantity
      - unitId
      - ingredientId
    Recipe:
      title: "Recipe schema"
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
        rating:
          type: integer
        url:
          type: string
        image:
          type: string
        ingredients:
          type: array
          items:
            $ref: "#/components/schemas/RecipeIngredient"
        createdDate:
          type: string
      required:
      - title
      - description
      - url
      - image
      - ingredients
    Day:
      title: "Day schema"
      type: object
      properties:
        date:
          type: string
        recipeId:
          type: string
        alternateDay:
          type: string
        recipe:
          $ref: "#/components/schemas/Recipe"
      required:
      - date
x-amazon-apigateway-request-validators:
  Validate body:
    validateRequestParameters: false
    validateRequestBody: true
  Validate query string:
    validateRequestParameters: true
    validateRequestBody: false